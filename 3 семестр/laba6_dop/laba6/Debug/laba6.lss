
laba6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000001fa  0000028e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010e  0080010e  0000029c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a57  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000945  00000000  00000000  00000d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c4  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000005c  00000000  00000000  00001994  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000468  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000007d  00000000  00000000  00001e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001ed5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_20>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea ef       	ldi	r30, 0xFA	; 250
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ae 30       	cpi	r26, 0x0E	; 14
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ae e0       	ldi	r26, 0x0E	; 14
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a3 31       	cpi	r26, 0x13	; 19
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <main>
  ea:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <__vector_20>:
char y;				//переменная для адреса
char len;			//переменная для длины строки
char Msg[13] = "\nAtmega328P\n";	//сообщение (\n вначале просто по приколу)
char flag = 0x00;					//флаг для условий
ISR (USART0_TX_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	2f 93       	push	r18
  fe:	3f 93       	push	r19
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	ef 93       	push	r30
 106:	ff 93       	push	r31
	if (flag == 0x00 & x == 0x80)	//проверка что начало передачи с 0x80
 108:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <x>
 112:	20 38       	cpi	r18, 0x80	; 128
 114:	09 f0       	breq	.+2      	; 0x118 <__vector_20+0x26>
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	99 23       	and	r25, r25
 11a:	29 f0       	breq	.+10     	; 0x126 <__vector_20+0x34>
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	81 11       	cpse	r24, r1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	91 11       	cpse	r25, r1
 124:	02 c0       	rjmp	.+4      	; 0x12a <__vector_20+0x38>
		flag = 0x01;				//установка следующего флага
	if (flag == 0x01 & UDRE0 != 0 & TXC0 != 0)	//проверка что регистр пустой после начала передачи
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	79 f4       	brne	.+30     	; 0x148 <__vector_20+0x56>
	{
		UDR0 = y = 0xA0;						//передача адреса
 12a:	80 ea       	ldi	r24, 0xA0	; 160
 12c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <y>
 130:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		flag = 0x02;							//установка следующего флага
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
	}
	if (flag == 0x02 & y == USB & UDRE0 != 0 &TXC0 != 0)	//проверка что адрес верный
 13a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <y>
 13e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <USB>
 142:	98 17       	cp	r25, r24
 144:	81 f0       	breq	.+32     	; 0x166 <__vector_20+0x74>
 146:	35 c0       	rjmp	.+106    	; 0x1b2 <__vector_20+0xc0>
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <y>
 14e:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <USB>
 152:	32 13       	cpse	r19, r18
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	99 23       	and	r25, r25
 158:	b1 f0       	breq	.+44     	; 0x186 <__vector_20+0x94>
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	09 f0       	breq	.+2      	; 0x162 <__vector_20+0x70>
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	99 23       	and	r25, r25
 164:	81 f0       	breq	.+32     	; 0x186 <__vector_20+0x94>
	{
		UDR0 = len = strlen(Msg);							//передача длины сообщения
 166:	e0 e0       	ldi	r30, 0x00	; 0
 168:	f1 e0       	ldi	r31, 0x01	; 1
 16a:	01 90       	ld	r0, Z+
 16c:	00 20       	and	r0, r0
 16e:	e9 f7       	brne	.-6      	; 0x16a <__vector_20+0x78>
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	e0 50       	subi	r30, 0x00	; 0
 174:	f1 40       	sbci	r31, 0x01	; 1
 176:	e0 93 12 01 	sts	0x0112, r30	; 0x800112 <len>
 17a:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		flag = 0x03;										//установка следующего флага										
 17e:	83 e0       	ldi	r24, 0x03	; 3
 180:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 184:	02 c0       	rjmp	.+4      	; 0x18a <__vector_20+0x98>
	}
	if (UDRE0 != 0 & TXC0 != 0 & flag == 0x03)				//проверка что флаг 0x03(т е всё до этого было верным)
 186:	83 30       	cpi	r24, 0x03	; 3
 188:	a1 f4       	brne	.+40     	; 0x1b2 <__vector_20+0xc0>
	{
		if (i <= len)										//проверка на конец строки
 18a:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <i>
 18e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <len>
 192:	8e 17       	cp	r24, r30
 194:	58 f0       	brcs	.+22     	; 0x1ac <__vector_20+0xba>
			UDR0 = Msg[i++];								//передача символа строки
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	8e 0f       	add	r24, r30
 19a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <i>
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	e0 50       	subi	r30, 0x00	; 0
 1a2:	ff 4f       	sbci	r31, 0xFF	; 255
 1a4:	80 81       	ld	r24, Z
 1a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <__vector_20+0xc0>
		else 
		{	
			UDR0 = 0xF0;									//передача конца передачи
 1ac:	80 ef       	ldi	r24, 0xF0	; 240
 1ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		}
	}

}
 1b2:	ff 91       	pop	r31
 1b4:	ef 91       	pop	r30
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	3f 91       	pop	r19
 1bc:	2f 91       	pop	r18
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <main>:

int main(void)
{

	UBRR0 = 3; //скорость
 1c8:	83 e0       	ldi	r24, 0x03	; 3
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B |= (1<<TXEN0) | (1 << TXCIE0);	//разрешение отправки данных
 1d4:	e1 ec       	ldi	r30, 0xC1	; 193
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	88 64       	ori	r24, 0x48	; 72
 1dc:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);	//размер пакета 8бит
 1de:	e2 ec       	ldi	r30, 0xC2	; 194
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	86 60       	ori	r24, 0x06	; 6
 1e6:	80 83       	st	Z, r24
	sei();	//глобальное разрешение прерываний
 1e8:	78 94       	sei
	UDR0 = x = 0x80;	//начало передачи
 1ea:	80 e8       	ldi	r24, 0x80	; 128
 1ec:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <x>
 1f0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <main+0x2c>

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
