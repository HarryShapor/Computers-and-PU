
laba7_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000232  000002c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000232  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800114  00800114  000002da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a71  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000957  00000000  00000000  00000ded  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e3  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046f  00000000  00000000  00001abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ed  00000000  00000000  00001f2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_20>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_23>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e2 e3       	ldi	r30, 0x32	; 50
  c8:	f2 e0       	ldi	r31, 0x02	; 2
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 31       	cpi	r26, 0x14	; 20
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e1       	ldi	r26, 0x14	; 20
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a7 31       	cpi	r26, 0x17	; 23
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <main>
  ea:	0c 94 17 01 	jmp	0x22e	; 0x22e <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <__vector_20>:
char i = 0;
char Low[12] = "Low Voltage\n";
char Nor[7] = "Normal\n";
char* x;
ISR (USART0_TX_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	2f 93       	push	r18
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
 102:	af 93       	push	r26
 104:	bf 93       	push	r27
 106:	ef 93       	push	r30
 108:	ff 93       	push	r31
	if (i <= strlen(x) & UDRE0 != 0 & TXC0 != 0)
 10a:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
 10e:	82 2f       	mov	r24, r18
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <x>
 116:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <x+0x1>
 11a:	fd 01       	movw	r30, r26
 11c:	01 90       	ld	r0, Z+
 11e:	00 20       	and	r0, r0
 120:	e9 f7       	brne	.-6      	; 0x11c <__vector_20+0x2a>
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	ea 1b       	sub	r30, r26
 126:	fb 0b       	sbc	r31, r27
 128:	e8 17       	cp	r30, r24
 12a:	f9 07       	cpc	r31, r25
 12c:	d0 f0       	brcs	.+52     	; 0x162 <__vector_20+0x70>
	{
		UDR0 = x[i++];
 12e:	2f 5f       	subi	r18, 0xFF	; 255
 130:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <__data_end>
 134:	fd 01       	movw	r30, r26
 136:	e8 0f       	add	r30, r24
 138:	f9 1f       	adc	r31, r25
 13a:	80 81       	ld	r24, Z
 13c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	}
	if (i >= strlen(x))
 140:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <x>
 144:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <x+0x1>
 148:	fd 01       	movw	r30, r26
 14a:	01 90       	ld	r0, Z+
 14c:	00 20       	and	r0, r0
 14e:	e9 f7       	brne	.-6      	; 0x14a <__vector_20+0x58>
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	ea 1b       	sub	r30, r26
 154:	fb 0b       	sbc	r31, r27
 156:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	8e 17       	cp	r24, r30
 15e:	9f 07       	cpc	r25, r31
 160:	38 f0       	brcs	.+14     	; 0x170 <__vector_20+0x7e>
	{
		UCSR0B &= 0b10011111;
 162:	e1 ec       	ldi	r30, 0xC1	; 193
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	8f 79       	andi	r24, 0x9F	; 159
 16a:	80 83       	st	Z, r24
		i = 0x00;
 16c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
	}
}
 170:	ff 91       	pop	r31
 172:	ef 91       	pop	r30
 174:	bf 91       	pop	r27
 176:	af 91       	pop	r26
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	2f 91       	pop	r18
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <__vector_23>:

ISR(ANALOG_COMP_vect)
{
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	ef 93       	push	r30
 198:	ff 93       	push	r31
	if (!(ACSR & 0b00100000))
 19a:	00 b6       	in	r0, 0x30	; 48
 19c:	05 fc       	sbrc	r0, 5
 19e:	13 c0       	rjmp	.+38     	; 0x1c6 <__vector_23+0x3e>
	{
		x = Nor;
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <x+0x1>
 1a8:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <x>
		UDR0 = x[i++];
 1ac:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__data_end>
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	8e 0f       	add	r24, r30
 1b4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	e0 50       	subi	r30, 0x00	; 0
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	80 81       	ld	r24, Z
 1c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1c4:	12 c0       	rjmp	.+36     	; 0x1ea <__vector_23+0x62>
	}
	else
	{
		x = Low;
 1c6:	87 e0       	ldi	r24, 0x07	; 7
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <x+0x1>
 1ce:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <x>
		UDR0 = x[i++];
 1d2:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__data_end>
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	8e 0f       	add	r24, r30
 1da:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	e9 5f       	subi	r30, 0xF9	; 249
 1e2:	fe 4f       	sbci	r31, 0xFE	; 254
 1e4:	80 81       	ld	r24, Z
 1e6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	}
	
}
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	9f 91       	pop	r25
 1f0:	8f 91       	pop	r24
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <main>:

int main(void)
{
    UBRR0 = 103;
 1fc:	87 e6       	ldi	r24, 0x67	; 103
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 204:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B |= (1 << TXEN0) | (1 << TXCIE0);
 208:	e1 ec       	ldi	r30, 0xC1	; 193
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	88 64       	ori	r24, 0x48	; 72
 210:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
 212:	e2 ec       	ldi	r30, 0xC2	; 194
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	86 60       	ori	r24, 0x06	; 6
 21a:	80 83       	st	Z, r24
	ACSR = 0x48;
 21c:	88 e4       	ldi	r24, 0x48	; 72
 21e:	80 bf       	out	0x30, r24	; 48
	sei();
 220:	78 94       	sei
    while (1) 
    {
		UCSR0B |= (1 << TXEN0) | (1 << TXCIE0);
 222:	e1 ec       	ldi	r30, 0xC1	; 193
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	88 64       	ori	r24, 0x48	; 72
 22a:	80 83       	st	Z, r24
 22c:	fc cf       	rjmp	.-8      	; 0x226 <main+0x2a>

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
