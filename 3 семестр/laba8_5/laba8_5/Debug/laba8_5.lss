
laba8_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009c5  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ed  00000000  00000000  00000c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cc  00000000  00000000  0000153a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001808  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045f  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001caf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001cf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_11>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a3 30       	cpi	r26, 0x03	; 3
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  d4:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <__vector_11>:
#include <avr/interrupt.h>	//библиотека работы с прерываниями
char flag_2 = 0x00;
char flag_1 = 0x00;
char flag_0 = 0x00;
ISR (TIMER1_COMPA_vect)		//обработчик прерываний по вектору переполнения Timer1
{
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
	flag_0 += 0x01;
  ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ee:	8f 5f       	subi	r24, 0xFF	; 255
  f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	flag_1 += 0x01;
  f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <flag_1>
  f8:	9f 5f       	subi	r25, 0xFF	; 255
  fa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <flag_1>
	flag_2 += 0x01;
  fe:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <flag_2>
 102:	9f 5f       	subi	r25, 0xFF	; 255
 104:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <flag_2>
	if (flag_0 == 0x0F)
 108:	8f 30       	cpi	r24, 0x0F	; 15
 10a:	31 f4       	brne	.+12     	; 0x118 <__vector_11+0x3c>
	{
		PORTD ^= 0x01;
 10c:	9b b1       	in	r25, 0x0b	; 11
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	89 27       	eor	r24, r25
 112:	8b b9       	out	0x0b, r24	; 11
		flag_0 = 0x00;
 114:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
	if (flag_1 == 0x06)	//смена состояния вывода PORTB5 на противоположное (светодиод)
 118:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag_1>
 11c:	86 30       	cpi	r24, 0x06	; 6
 11e:	31 f4       	brne	.+12     	; 0x12c <__vector_11+0x50>
	{
		PORTD ^= 0x02;
 120:	9b b1       	in	r25, 0x0b	; 11
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	89 27       	eor	r24, r25
 126:	8b b9       	out	0x0b, r24	; 11
		flag_1 = 0x00;
 128:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <flag_1>
	}
	if (flag_2 == 0x14)
 12c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <flag_2>
 130:	84 31       	cpi	r24, 0x14	; 20
 132:	31 f4       	brne	.+12     	; 0x140 <__vector_11+0x64>
		{
			PORTB ^= 0x20;
 134:	95 b1       	in	r25, 0x05	; 5
 136:	80 e2       	ldi	r24, 0x20	; 32
 138:	89 27       	eor	r24, r25
 13a:	85 b9       	out	0x05, r24	; 5
			flag_2 = 0x00;
 13c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <flag_2>
		}
	
}
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <main>:
int main(void)				//главная процедура, точка входа в программу
{
	DDRB = 0x20;
 14e:	80 e2       	ldi	r24, 0x20	; 32
 150:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x03;			//настройка PORTB5 на вывод информации
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	8a b9       	out	0x0a, r24	; 10
	//-------------------------------------------------------------------------------------
	TCCR1A = (1 << COM1A0) | (1 << COM1A1);			//обычный режим без использования выводов OC1A и OC1B
 156:	90 ec       	ldi	r25, 0xC0	; 192
 158:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1 << WGM12) | (1 << CS12);	//запуск таймера, предделитель clk/64
 15c:	9c e0       	ldi	r25, 0x0C	; 12
 15e:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = (1 << OCIE1A) | (1 << TOV0);
 162:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	OCR1AH = 0x18;
 166:	88 e1       	ldi	r24, 0x18	; 24
 168:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	OCR1AL = 0x6A;	//разрешение прерываний по переполнению счётчика TC1
 16c:	8a e6       	ldi	r24, 0x6A	; 106
 16e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	sei();					//глобальное разрешение прерываний
 172:	78 94       	sei
 174:	ff cf       	rjmp	.-2      	; 0x174 <main+0x26>

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
