
laba6_DOP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000001de  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800118  00800118  0000028a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a47  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000945  00000000  00000000  00000d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d0  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00001980  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046c  00000000  00000000  000019d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000070  00000000  00000000  00001e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001eb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_20>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ee ed       	ldi	r30, 0xDE	; 222
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a8 31       	cpi	r26, 0x18	; 24
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a8 e1       	ldi	r26, 0x18	; 24
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ac 31       	cpi	r26, 0x1C	; 28
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <main>
  ea:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <__vector_20>:
char x;
char len;
char Msg[23] = "Atmega328P:ReadyToWork\n";
char flag = 0x00;
ISR (USART0_TX_vect)
{	
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	2f 93       	push	r18
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
	if (flag == 0x00 & x == 0x80)
 106:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <x>
 110:	20 38       	cpi	r18, 0x80	; 128
 112:	09 f0       	breq	.+2      	; 0x116 <__vector_20+0x24>
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	99 23       	and	r25, r25
 118:	29 f0       	breq	.+10     	; 0x124 <__vector_20+0x32>
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	81 11       	cpse	r24, r1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	91 11       	cpse	r25, r1
 122:	02 c0       	rjmp	.+4      	; 0x128 <__vector_20+0x36>
		flag = 0x01;
	if (flag == 0x01 & UDRE0 != 0 & TXC0 != 0)
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	51 f4       	brne	.+20     	; 0x13c <__vector_20+0x4a>
		{
			UDR0 = USB;
 128:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB>
 12c:	e6 ec       	ldi	r30, 0xC6	; 198
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 83       	st	Z, r24
			flag = 0x02;
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
		}
	if (flag == 0x02 & TXC0 == 0 & UDR0 == 0x65)
 138:	80 81       	ld	r24, Z
 13a:	2c c0       	rjmp	.+88     	; 0x194 <__vector_20+0xa2>
 13c:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		flag = 0x03;
	if (UDRE0 != 0 &TXC0 != 0 & flag == 0x03)
 140:	83 30       	cpi	r24, 0x03	; 3
 142:	81 f4       	brne	.+32     	; 0x164 <__vector_20+0x72>
	{
		UDR0 = len = strlen(Msg);
 144:	e0 e0       	ldi	r30, 0x00	; 0
 146:	f1 e0       	ldi	r31, 0x01	; 1
 148:	01 90       	ld	r0, Z+
 14a:	00 20       	and	r0, r0
 14c:	e9 f7       	brne	.-6      	; 0x148 <__vector_20+0x56>
 14e:	31 97       	sbiw	r30, 0x01	; 1
 150:	e0 50       	subi	r30, 0x00	; 0
 152:	f1 40       	sbci	r31, 0x01	; 1
 154:	e0 93 1b 01 	sts	0x011B, r30	; 0x80011b <len>
 158:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		flag = 0x04;
 15c:	84 e0       	ldi	r24, 0x04	; 4
 15e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 162:	04 c0       	rjmp	.+8      	; 0x16c <__vector_20+0x7a>
	}
	if (flag == 0x04 & UDRE0 != 0 & TXC0 != 0)
 164:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 168:	84 30       	cpi	r24, 0x04	; 4
 16a:	a1 f4       	brne	.+40     	; 0x194 <__vector_20+0xa2>
		{
			if (i <= len)
 16c:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <i>
 170:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <len>
 174:	8e 17       	cp	r24, r30
 176:	58 f0       	brcs	.+22     	; 0x18e <__vector_20+0x9c>
				UDR0 = Msg[i++];
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	8e 0f       	add	r24, r30
 17c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <i>
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	e0 50       	subi	r30, 0x00	; 0
 184:	ff 4f       	sbci	r31, 0xFF	; 255
 186:	80 81       	ld	r24, Z
 188:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 18c:	03 c0       	rjmp	.+6      	; 0x194 <__vector_20+0xa2>
			else UDR0 = 0xF0;
 18e:	80 ef       	ldi	r24, 0xF0	; 240
 190:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		}
	if (TXC0 == 0 & UDR0 == 0xF0)
 194:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	{
		UCSR0B &= 0xBF;
		i = 0;
	}
}
 198:	ff 91       	pop	r31
 19a:	ef 91       	pop	r30
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	2f 91       	pop	r18
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <main>:

int main(void)
{

	UBRR0 = 1; //скорость
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1b4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B |= (1<<TXEN0) | (1 << TXCIE0);	//разрешение отправки данных
 1b8:	e1 ec       	ldi	r30, 0xC1	; 193
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	88 64       	ori	r24, 0x48	; 72
 1c0:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);	//размер пакета 8бит
 1c2:	e2 ec       	ldi	r30, 0xC2	; 194
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	86 60       	ori	r24, 0x06	; 6
 1ca:	80 83       	st	Z, r24
	sei();	//глобальное разрешение прерываний
 1cc:	78 94       	sei
	UDR0 = x = 0x80;
 1ce:	80 e8       	ldi	r24, 0x80	; 128
 1d0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <x>
 1d4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <main+0x2c>

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
