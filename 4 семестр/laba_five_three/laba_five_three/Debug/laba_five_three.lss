
laba_five_three.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000248  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000002bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b16  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009db  00000000  00000000  00000e82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038a  00000000  00000000  0000185d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00001be8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bb  00000000  00000000  00001ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ad  00000000  00000000  0000215f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000230c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_18>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a3 30       	cpi	r26, 0x03	; 3
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <main>
  d4:	0c 94 22 01 	jmp	0x244	; 0x244 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <EEPROM_write>:
char x;					//вспомогательная переменная
int count;				//счётчик адреса eeprom
	//массив для значений из eeprom
void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
	/* ожидание завершения предыдущей операции */
	while(EECR & (1<<EEPE)); //не продолжать пока бит (EEPE==1)
  dc:	f9 99       	sbic	0x1f, 1	; 31
  de:	fe cf       	rjmp	.-4      	; 0xdc <EEPROM_write>
	/* установка значений регистров адреса и данных */
	EEAR = uiAddress;
  e0:	92 bd       	out	0x22, r25	; 34
  e2:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
  e4:	60 bd       	out	0x20, r22	; 32
	/* чтение значения EECR и подготовка констант */
	uint8_t EEMPEmask = EECR|(1<<EEMPE);
  e6:	8f b3       	in	r24, 0x1f	; 31
  e8:	98 2f       	mov	r25, r24
  ea:	94 60       	ori	r25, 0x04	; 4
	uint8_t EEPEmask = EEMPEmask|(1<<EEPE);
  ec:	86 60       	ori	r24, 0x06	; 6
	/* выключение системы прерываний */
	cli();
  ee:	f8 94       	cli
	/* установка 1 в EEMPE */
	EECR = EEMPEmask;
  f0:	9f bb       	out	0x1f, r25	; 31
	/* запись значения в EEPROM */
	EECR = EEPEmask;
  f2:	8f bb       	out	0x1f, r24	; 31
	/* включение системы прерываний */
	sei();
  f4:	78 94       	sei
  f6:	08 95       	ret

000000f8 <EEPROM_read>:
}
unsigned char EEPROM_read(unsigned int uiAddress){
	/* ожидание завершения предыдущей операции */
	while(EECR & (1<<EEPE));//не продолжать пока бит (EEPE==1)
  f8:	f9 99       	sbic	0x1f, 1	; 31
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <EEPROM_read>
	/* установка значений регистра адреса */
	EEAR = uiAddress;
  fc:	92 bd       	out	0x22, r25	; 34
  fe:	81 bd       	out	0x21, r24	; 33
	/* начало операции чтения */
	EECR |= (1<<EERE);
 100:	f8 9a       	sbi	0x1f, 0	; 31
	/* Rвозврат значения */
	return EEDR;
 102:	80 b5       	in	r24, 0x20	; 32
}
 104:	08 95       	ret

00000106 <__vector_18>:
ISR(USART0_RX_vect){			//прерываение по приёму данных по UART
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	2f 93       	push	r18
 112:	3f 93       	push	r19
 114:	4f 93       	push	r20
 116:	5f 93       	push	r21
 118:	6f 93       	push	r22
 11a:	7f 93       	push	r23
 11c:	8f 93       	push	r24
 11e:	9f 93       	push	r25
 120:	af 93       	push	r26
 122:	bf 93       	push	r27
 124:	ef 93       	push	r30
 126:	ff 93       	push	r31
	x = UDR0;					//Чтение значения по UART
 128:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 12c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
	while(!(UCSR0A & (1 << UDRE0))); // Ждем пока буфер отправки не будет пустым
 130:	e0 ec       	ldi	r30, 0xC0	; 192
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	85 ff       	sbrs	r24, 5
 138:	fd cf       	rjmp	.-6      	; 0x134 <__vector_18+0x2e>
		count++;					//увеличение счётчика адреса eeprom
 13a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count>
 13e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <count+0x1>
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <count+0x1>
 148:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <count>
		EEPROM_write((uint8_t *) count, (uint8_t) x);	//запись значения в EEPROM[count]
 14c:	0e 94 6e 00 	call	0xdc	; 0xdc <EEPROM_write>
		EEPROM_write((uint8_t *) 0, (uint8_t) count);	//запись count в EEPROM[0]
 150:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <count>
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 6e 00 	call	0xdc	; 0xdc <EEPROM_write>
}
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <uartic>:
void uartic(){			//функция инициализации UART
	UBRR0 = 103;		//главная процедура, точка входа в программу
 17e:	87 e6       	ldi	r24, 0x67	; 103
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 186:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);//размер пакета 8бит
 18a:	e2 ec       	ldi	r30, 0xC2	; 194
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	86 60       	ori	r24, 0x06	; 6
 192:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	//разрешение передачи и приёма данных
 194:	e1 ec       	ldi	r30, 0xC1	; 193
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	88 69       	ori	r24, 0x98	; 152
 19c:	80 83       	st	Z, r24
 19e:	08 95       	ret

000001a0 <main>:
}
int main(void){		//главная процедура, точка входа в программу
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
	uartic();		//вызов функции инициализации UART
 1a8:	0e 94 bf 00 	call	0x17e	; 0x17e <uartic>
	sei();			//разрешение глобальных прерываний
 1ac:	78 94       	sei

	//_delay_ms(150000);		//задержка 15 секунд
	count = EEPROM_read((uint8_t*) 0); // Читаем значение из EEPROM[0]
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 7c 00 	call	0xf8	; 0xf8 <EEPROM_read>
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <count+0x1>
 1bc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <count>
	uint8_t mass[count];
 1c0:	2d b7       	in	r18, 0x3d	; 61
 1c2:	3e b7       	in	r19, 0x3e	; 62
 1c4:	28 1b       	sub	r18, r24
 1c6:	39 0b       	sbc	r19, r25
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	f8 94       	cli
 1cc:	3e bf       	out	0x3e, r19	; 62
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	2d bf       	out	0x3d, r18	; 61
 1d2:	ad b7       	in	r26, 0x3d	; 61
 1d4:	be b7       	in	r27, 0x3e	; 62
 1d6:	11 96       	adiw	r26, 0x01	; 1
 1d8:	7d 01       	movw	r14, r26
	for (int i=0; i < count; i++){		//перебор значений блока
 1da:	18 16       	cp	r1, r24
 1dc:	19 06       	cpc	r1, r25
 1de:	94 f4       	brge	.+36     	; 0x204 <main+0x64>
 1e0:	6d 01       	movw	r12, r26
 1e2:	00 e0       	ldi	r16, 0x00	; 0
 1e4:	10 e0       	ldi	r17, 0x00	; 0
		mass[i] = EEPROM_read((uint8_t*) i); // Отправляем значение по UART
 1e6:	c8 01       	movw	r24, r16
 1e8:	0e 94 7c 00 	call	0xf8	; 0xf8 <EEPROM_read>
 1ec:	f6 01       	movw	r30, r12
 1ee:	81 93       	st	Z+, r24
 1f0:	6f 01       	movw	r12, r30
	sei();			//разрешение глобальных прерываний

	//_delay_ms(150000);		//задержка 15 секунд
	count = EEPROM_read((uint8_t*) 0); // Читаем значение из EEPROM[0]
	uint8_t mass[count];
	for (int i=0; i < count; i++){		//перебор значений блока
 1f2:	0f 5f       	subi	r16, 0xFF	; 255
 1f4:	1f 4f       	sbci	r17, 0xFF	; 255
 1f6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count>
 1fa:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <count+0x1>
 1fe:	08 17       	cp	r16, r24
 200:	19 07       	cpc	r17, r25
 202:	8c f3       	brlt	.-30     	; 0x1e6 <main+0x46>
		mass[i] = EEPROM_read((uint8_t*) i); // Отправляем значение по UART
	}
	for (int i=0; i < count; i++){		//перебор значений массива
 204:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count>
 208:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <count+0x1>
 20c:	18 16       	cp	r1, r24
 20e:	19 06       	cpc	r1, r25
 210:	c4 f4       	brge	.+48     	; 0x242 <main+0xa2>
 212:	b7 01       	movw	r22, r14
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	30 e0       	ldi	r19, 0x00	; 0
		while(!(UCSR0A & (1 << UDRE0))); // Ждем пока буфер отправки не будет пустым
 218:	e0 ec       	ldi	r30, 0xC0	; 192
 21a:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = mass[i]; // Отправляем значение по UART
 21c:	46 ec       	ldi	r20, 0xC6	; 198
 21e:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t mass[count];
	for (int i=0; i < count; i++){		//перебор значений блока
		mass[i] = EEPROM_read((uint8_t*) i); // Отправляем значение по UART
	}
	for (int i=0; i < count; i++){		//перебор значений массива
		while(!(UCSR0A & (1 << UDRE0))); // Ждем пока буфер отправки не будет пустым
 220:	80 81       	ld	r24, Z
 222:	85 ff       	sbrs	r24, 5
 224:	fd cf       	rjmp	.-6      	; 0x220 <main+0x80>
		UDR0 = mass[i]; // Отправляем значение по UART
 226:	db 01       	movw	r26, r22
 228:	8d 91       	ld	r24, X+
 22a:	bd 01       	movw	r22, r26
 22c:	da 01       	movw	r26, r20
 22e:	8c 93       	st	X, r24
	count = EEPROM_read((uint8_t*) 0); // Читаем значение из EEPROM[0]
	uint8_t mass[count];
	for (int i=0; i < count; i++){		//перебор значений блока
		mass[i] = EEPROM_read((uint8_t*) i); // Отправляем значение по UART
	}
	for (int i=0; i < count; i++){		//перебор значений массива
 230:	2f 5f       	subi	r18, 0xFF	; 255
 232:	3f 4f       	sbci	r19, 0xFF	; 255
 234:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count>
 238:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <count+0x1>
 23c:	28 17       	cp	r18, r24
 23e:	39 07       	cpc	r19, r25
 240:	7c f3       	brlt	.-34     	; 0x220 <main+0x80>
 242:	ff cf       	rjmp	.-2      	; 0x242 <main+0xa2>

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
