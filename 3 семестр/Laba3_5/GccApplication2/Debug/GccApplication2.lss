
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067c  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000214  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001024  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000336  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000137e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
int main(void)
{
	DDRB = 0x20;
  80:	80 e2       	ldi	r24, 0x20	; 32
  82:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x03;
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00011100;
  88:	8c e1       	ldi	r24, 0x1C	; 28
  8a:	8b b9       	out	0x0b, r24	; 11
	while(1)
	{
		if ((PIND&0x04) == 0x00)
			PORTB = PORTB ^ 0x20;
  8c:	20 e2       	ldi	r18, 0x20	; 32
		//else PORTB |= 0x01;
		if ((PIND&0x08) == 0x00)
			PORTD = PORTD ^ 0x01;
  8e:	91 e0       	ldi	r25, 0x01	; 1
		//else PORTD |=0x01;
		if ((PIND&0x10) == 0x00)
			PORTD = PORTD ^ 0x02;
  90:	32 e0       	ldi	r19, 0x02	; 2
	DDRB = 0x20;
	DDRD = 0x03;
	PORTD = 0b00011100;
	while(1)
	{
		if ((PIND&0x04) == 0x00)
  92:	4a 99       	sbic	0x09, 2	; 9
  94:	03 c0       	rjmp	.+6      	; 0x9c <main+0x1c>
			PORTB = PORTB ^ 0x20;
  96:	85 b1       	in	r24, 0x05	; 5
  98:	82 27       	eor	r24, r18
  9a:	85 b9       	out	0x05, r24	; 5
		//else PORTB |= 0x01;
		if ((PIND&0x08) == 0x00)
  9c:	4b 99       	sbic	0x09, 3	; 9
  9e:	03 c0       	rjmp	.+6      	; 0xa6 <main+0x26>
			PORTD = PORTD ^ 0x01;
  a0:	8b b1       	in	r24, 0x0b	; 11
  a2:	89 27       	eor	r24, r25
  a4:	8b b9       	out	0x0b, r24	; 11
		//else PORTD |=0x01;
		if ((PIND&0x10) == 0x00)
  a6:	4c 99       	sbic	0x09, 4	; 9
  a8:	f4 cf       	rjmp	.-24     	; 0x92 <main+0x12>
			PORTD = PORTD ^ 0x02;
  aa:	8b b1       	in	r24, 0x0b	; 11
  ac:	83 27       	eor	r24, r19
  ae:	8b b9       	out	0x0b, r24	; 11
  b0:	f0 cf       	rjmp	.-32     	; 0x92 <main+0x12>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
