
laba5_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006e1  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000632  00000000  00000000  0000093d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000026a  00000000  00000000  00000f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  000011dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034a  00000000  00000000  00001248  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  00001592  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 80 00 	call	0x100	; 0x100 <main>
  88:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_3>:
#include <avr/io.h>
#include <avr/interrupt.h>
char x,y, count;
ISR(PCINT0_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	x = (count & 0x40) >> 1;
  9e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
  a2:	80 74       	andi	r24, 0x40	; 64
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	95 95       	asr	r25
  a8:	87 95       	ror	r24
  aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	PORTB = PORTB & 0xDF;
  ae:	2d 98       	cbi	0x05, 5	; 5
	PORTB = PORTB | x;
  b0:	95 b1       	in	r25, 0x05	; 5
  b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b6:	89 2b       	or	r24, r25
  b8:	85 b9       	out	0x05, r24	; 5
}
  ba:	9f 91       	pop	r25
  bc:	8f 91       	pop	r24
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <__vector_5>:
ISR(PCINT2_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	y = (count & 0x40) >> 1;
  d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
  da:	80 74       	andi	r24, 0x40	; 64
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	95 95       	asr	r25
  e0:	87 95       	ror	r24
  e2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <y>
	PORTB = PORTB & 0xDF;
  e6:	2d 98       	cbi	0x05, 5	; 5
	PORTB = PORTB | y;
  e8:	95 b1       	in	r25, 0x05	; 5
  ea:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <y>
  ee:	89 2b       	or	r24, r25
  f0:	85 b9       	out	0x05, r24	; 5
}
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <main>:
int main(void)
{
	x=0;
 100:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	sei();
 104:	78 94       	sei
	DDRC = 0xff;
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	87 b9       	out	0x07, r24	; 7
	DDRB = 0x20;
 10a:	80 e2       	ldi	r24, 0x20	; 32
 10c:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x00;
 10e:	1a b8       	out	0x0a, r1	; 10
	PCICR = 0x07;
 110:	87 e0       	ldi	r24, 0x07	; 7
 112:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK0 |= (1 << PCINT3);
 116:	eb e6       	ldi	r30, 0x6B	; 107
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	88 60       	ori	r24, 0x08	; 8
 11e:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT20);
 120:	ed e6       	ldi	r30, 0x6D	; 109
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	80 61       	ori	r24, 0x10	; 16
 128:	80 83       	st	Z, r24

	while (1)
	{
		PORTC = count;
 12a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 12e:	88 b9       	out	0x08, r24	; 8
		PORTD = PORTC >> 4;
 130:	88 b1       	in	r24, 0x08	; 8
 132:	82 95       	swap	r24
 134:	8f 70       	andi	r24, 0x0F	; 15
 136:	8b b9       	out	0x0b, r24	; 11
		count++;
 138:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 13c:	8f 5f       	subi	r24, 0xFF	; 255
 13e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count>
 142:	f3 cf       	rjmp	.-26     	; 0x12a <main+0x2a>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
