
laba8_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000268  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a0b  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ed  00000000  00000000  00000d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000342  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  0000195c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000486  00000000  00000000  00001a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000153  00000000  00000000  00001eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002005  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_7>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_9>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_11>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_14>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_16>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <main>
  d4:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <__vector_16>:
#include <avr/io.h>			//библиотека с логическими именами портов ввода/вывода
#include <avr/interrupt.h>	//библиотека работы с прерываниями
char flag_2 = 0x00;
char flag_0 = 0x00;
ISR (TIMER0_OVF_vect)
{
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
	flag_0 += 0x01;
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ec:	8f 5f       	subi	r24, 0xFF	; 255
  ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <__vector_11>:
ISR (TIMER1_COMPA_vect)		//обработчик прерываний по вектору переполнения Timer1
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
	PORTB ^= 0x20;	//смена состояния вывода PORTB5 на противоположное (светодиод)
 10c:	95 b1       	in	r25, 0x05	; 5
 10e:	80 e2       	ldi	r24, 0x20	; 32
 110:	89 27       	eor	r24, r25
 112:	85 b9       	out	0x05, r24	; 5
}
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <__vector_14>:
ISR (TIMER0_COMPA_vect)		//обработчик прерываний по вектору переполнения Timer1
{	
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
	if (flag_0 == 0x5C)
 130:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 134:	8c 35       	cpi	r24, 0x5C	; 92
 136:	31 f4       	brne	.+12     	; 0x144 <__vector_14+0x22>
	{
		PORTD ^= 0x01;
 138:	9b b1       	in	r25, 0x0b	; 11
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	89 27       	eor	r24, r25
 13e:	8b b9       	out	0x0b, r24	; 11
		flag_0 = 0x00;
 140:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}

}
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <__vector_9>:
ISR (TIMER2_OVF_vect)
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	8f 93       	push	r24
	flag_2 += 0x01;
 15e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag_2>
 162:	8f 5f       	subi	r24, 0xFF	; 255
 164:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag_2>
}
 168:	8f 91       	pop	r24
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <__vector_7>:
ISR (TIMER2_COMPA_vect)		//обработчик прерываний по вектору переполнения Timer1
{
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
	if (flag_2 == 0x25)
 182:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag_2>
 186:	85 32       	cpi	r24, 0x25	; 37
 188:	31 f4       	brne	.+12     	; 0x196 <__vector_7+0x22>
	{
		PORTD ^= 0x02;
 18a:	9b b1       	in	r25, 0x0b	; 11
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	89 27       	eor	r24, r25
 190:	8b b9       	out	0x0b, r24	; 11
		flag_2 = 0x00;
 192:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <flag_2>
	}
}
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <main>:
int main(void)				//главная процедура, точка входа в программу
{
	DDRB = 0x20;
 1a4:	80 e2       	ldi	r24, 0x20	; 32
 1a6:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x03;			//настройка PORTB5 на вывод информации
 1a8:	83 e0       	ldi	r24, 0x03	; 3
 1aa:	8a b9       	out	0x0a, r24	; 10
	//-------------------------------------------------------------------------------------
	TCCR1A = (1 << COM1A0) | (1 << COM1A1);			//обычный режим без использования выводов OC1A и OC1B
 1ac:	90 ec       	ldi	r25, 0xC0	; 192
 1ae:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1 << WGM12) | (1 << CS10) | (1 << CS12);	//запуск таймера, предделитель clk/64
 1b2:	9d e0       	ldi	r25, 0x0D	; 13
 1b4:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = (1 << OCIE1A);
 1b8:	92 e0       	ldi	r25, 0x02	; 2
 1ba:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	OCR1AH = 0x7A;
 1be:	9a e7       	ldi	r25, 0x7A	; 122
 1c0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	OCR1AL = 0x12;	//разрешение прерываний по переполнению счётчика TC1
 1c4:	92 e1       	ldi	r25, 0x12	; 18
 1c6:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	//-------------------------------------------------------------------------------------
	TCCR0A = (1 << COM0A0) | (1 << COM0A1) | (1 << WGM01);			//обычный режим без использования выводов OC1A и OC1B
 1ca:	22 ec       	ldi	r18, 0xC2	; 194
 1cc:	24 bd       	out	0x24, r18	; 36
	TCCR0B = (1 << CS00) | (1 << CS02);	//запуск таймера, предделитель clk/64
 1ce:	95 e0       	ldi	r25, 0x05	; 5
 1d0:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1 << OCIE0A) | (1 << TOV0);
 1d2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	OCR0A = 0xFF;	//разрешение прерываний по переполнению счётчика TC1
 1d6:	9f ef       	ldi	r25, 0xFF	; 255
 1d8:	97 bd       	out	0x27, r25	; 39
	//-------------------------------------------------------------------------------------
	TCCR2A = (1 << COM2A0) | (1 << COM2A1) | (1 << WGM21);			//обычный режим без использования выводов OC1A и OC1B
 1da:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B = (1 << CS20) | (1 << CS21) | (1 << CS22);	//запуск таймера, предделитель clk/64
 1de:	27 e0       	ldi	r18, 0x07	; 7
 1e0:	20 93 b1 00 	sts	0x00B1, r18	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	TIMSK2 = (1 << OCIE2A) | (1 << TOV0);
 1e4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	OCR2A = 0xFF;	//разрешение прерываний по переполнению счётчика TC1
 1e8:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	//-------------------------------------------------------------------------------------
	sei();					//глобальное разрешение прерываний
 1ec:	78 94       	sei
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <main+0x4a>

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
