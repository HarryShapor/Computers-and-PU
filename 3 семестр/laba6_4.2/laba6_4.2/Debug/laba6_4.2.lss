
laba6_4.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000232  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000002a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a59  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000957  00000000  00000000  00000da1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000308  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000473  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fa  00000000  00000000  00001f07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00002001  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_18>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_20>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a3 30       	cpi	r26, 0x03	; 3
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <main>
  d4:	0c 94 17 01 	jmp	0x22e	; 0x22e <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <__vector_20>:
char x = 0x00;				
char i = 0x00;
char y;
char Msg[];
ISR (USART0_TX_vect)		//обработчик прерывания USART_TX
{
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	2f 93       	push	r18
  e8:	3f 93       	push	r19
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
	if (i <= strlen(Msg) & UDRE0 != 0 & TXC0 != 0)
  f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f6:	e1 e0       	ldi	r30, 0x01	; 1
  f8:	f1 e0       	ldi	r31, 0x01	; 1
  fa:	01 90       	ld	r0, Z+
  fc:	00 20       	and	r0, r0
  fe:	e9 f7       	brne	.-6      	; 0xfa <__vector_20+0x1e>
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	e1 50       	subi	r30, 0x01	; 1
 104:	f1 40       	sbci	r31, 0x01	; 1
 106:	28 2f       	mov	r18, r24
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	e2 17       	cp	r30, r18
 10c:	f3 07       	cpc	r31, r19
 10e:	c0 f0       	brcs	.+48     	; 0x140 <__vector_20+0x64>
	{
		UDR0 = Msg[i++];
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	98 0f       	add	r25, r24
 114:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
 118:	f9 01       	movw	r30, r18
 11a:	ef 5f       	subi	r30, 0xFF	; 255
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	80 81       	ld	r24, Z
 120:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	}
	if (i >= strlen(Msg))
 124:	e1 e0       	ldi	r30, 0x01	; 1
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	01 90       	ld	r0, Z+
 12a:	00 20       	and	r0, r0
 12c:	e9 f7       	brne	.-6      	; 0x128 <__vector_20+0x4c>
 12e:	31 97       	sbiw	r30, 0x01	; 1
 130:	e1 50       	subi	r30, 0x01	; 1
 132:	f1 40       	sbci	r31, 0x01	; 1
 134:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	8e 17       	cp	r24, r30
 13c:	9f 07       	cpc	r25, r31
 13e:	38 f0       	brcs	.+14     	; 0x14e <__vector_20+0x72>
	{
		i = 0;
 140:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		UCSR0B &= 0xBF;
 144:	e1 ec       	ldi	r30, 0xC1	; 193
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	8f 7b       	andi	r24, 0xBF	; 191
 14c:	80 83       	st	Z, r24
	}
}
 14e:	ff 91       	pop	r31
 150:	ef 91       	pop	r30
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	3f 91       	pop	r19
 158:	2f 91       	pop	r18
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <__vector_18>:
ISR (USART0_RX_vect)		//обработчик прерывания USART_RX
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
 172:	af 93       	push	r26
 174:	bf 93       	push	r27
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
	if (UDR0 != 0x2E)
 17a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 17e:	8e 32       	cpi	r24, 0x2E	; 46
 180:	89 f0       	breq	.+34     	; 0x1a4 <__vector_18+0x40>
	{
		if (UDR0 != 0x21)
 182:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 186:	81 32       	cpi	r24, 0x21	; 33
 188:	59 f1       	breq	.+86     	; 0x1e0 <__vector_18+0x7c>
			Msg[i++] = UDR0;
 18a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	8e 0f       	add	r24, r30
 192:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 196:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	ef 5f       	subi	r30, 0xFF	; 255
 19e:	fe 4f       	sbci	r31, 0xFE	; 254
 1a0:	80 83       	st	Z, r24
 1a2:	1e c0       	rjmp	.+60     	; 0x1e0 <__vector_18+0x7c>
	}
	else
	{
		UCSR0B &= 0x6F;
 1a4:	e1 ec       	ldi	r30, 0xC1	; 193
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	8f 76       	andi	r24, 0x6F	; 111
 1ac:	80 83       	st	Z, r24
		i = 0x00;
		y = Msg[3];
 1ae:	a4 e0       	ldi	r26, 0x04	; 4
 1b0:	b1 e0       	ldi	r27, 0x01	; 1
 1b2:	8c 91       	ld	r24, X
		Msg[3] = Msg[4];
 1b4:	e5 e0       	ldi	r30, 0x05	; 5
 1b6:	f1 e0       	ldi	r31, 0x01	; 1
 1b8:	90 81       	ld	r25, Z
 1ba:	9c 93       	st	X, r25
		Msg[4] = y;
 1bc:	80 83       	st	Z, r24
		y = Msg[1];
 1be:	a2 e0       	ldi	r26, 0x02	; 2
 1c0:	b1 e0       	ldi	r27, 0x01	; 1
 1c2:	8c 91       	ld	r24, X
 1c4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <y>
		Msg[1] = Msg[2];
 1c8:	e3 e0       	ldi	r30, 0x03	; 3
 1ca:	f1 e0       	ldi	r31, 0x01	; 1
 1cc:	90 81       	ld	r25, Z
 1ce:	9c 93       	st	X, r25
		Msg[2] = y;
 1d0:	80 83       	st	Z, r24
		UDR0 = Msg[i++];
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1d8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Msg>
 1dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	}

}
 1e0:	ff 91       	pop	r31
 1e2:	ef 91       	pop	r30
 1e4:	bf 91       	pop	r27
 1e6:	af 91       	pop	r26
 1e8:	9f 91       	pop	r25
 1ea:	8f 91       	pop	r24
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <main>:

int main(void)				//точка входа в программу
{
	UBRR0 = 103;			//скорость 9600бит/c при частоте генератора 16МГц
 1f6:	87 e6       	ldi	r24, 0x67	; 103
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << TXCIE0);
 202:	e1 ec       	ldi	r30, 0xC1	; 193
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	88 65       	ori	r24, 0x58	; 88
 20a:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 20c:	e2 ec       	ldi	r30, 0xC2	; 194
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	86 60       	ori	r24, 0x06	; 6
 214:	80 83       	st	Z, r24
	sei();					//глобальное разрешение прерываний
 216:	78 94       	sei
	while (1)
	{	
		if (UDR0 == 0x21)
 218:	e6 ec       	ldi	r30, 0xC6	; 198
 21a:	f0 e0       	ldi	r31, 0x00	; 0
		{
			//x = UDR0;
			UCSR0B |= (1 << RXCIE0);
 21c:	a1 ec       	ldi	r26, 0xC1	; 193
 21e:	b0 e0       	ldi	r27, 0x00	; 0
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << TXCIE0);
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
	sei();					//глобальное разрешение прерываний
	while (1)
	{	
		if (UDR0 == 0x21)
 220:	80 81       	ld	r24, Z
 222:	81 32       	cpi	r24, 0x21	; 33
 224:	e9 f7       	brne	.-6      	; 0x220 <main+0x2a>
		{
			//x = UDR0;
			UCSR0B |= (1 << RXCIE0);
 226:	8c 91       	ld	r24, X
 228:	80 68       	ori	r24, 0x80	; 128
 22a:	8c 93       	st	X, r24
 22c:	f9 cf       	rjmp	.-14     	; 0x220 <main+0x2a>

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
