
laba_three_four.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000027e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a35  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000939  00000000  00000000  00000d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033c  00000000  00000000  000016a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  000019e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000494  00000000  00000000  00001aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000169  00000000  00000000  00001f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000020a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_10>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_14>
  3c:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__vector_15>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <main>
  d4:	0c 94 03 01 	jmp	0x206	; 0x206 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <__vector_10>:
#include <avr/io.h> //библиотека с логическими именами портов
#include <avr/interrupt.h>
uint16_t old; //глобальная переменная для хранения последнего значения захвата
ISR(TIMER1_CAPT_vect) //прерывание таймера 1 по захвату
{
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	2f 93       	push	r18
  e8:	3f 93       	push	r19
  ea:	4f 93       	push	r20
  ec:	5f 93       	push	r21
  ee:	6f 93       	push	r22
  f0:	7f 93       	push	r23
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
	uint16_t temp = ICR1; //текущее значение захвата
  f6:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  fa:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
		old = temp;
		TIMSK0 = (0 << OCIE0A) | (0 << OCIE0B);
	}
	if (PORTB0 == 0)
	{
		TCCR1B = (1 << ICES1) | (1 << CS12) | (0 << CS11) | (0 << CS10);
  fe:	24 e4       	ldi	r18, 0x44	; 68
 100:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		if (temp>old) //если текущее больше предыдущего
 104:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 108:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 10c:	28 17       	cp	r18, r24
 10e:	39 07       	cpc	r19, r25
 110:	28 f4       	brcc	.+10     	; 0x11c <__vector_10+0x40>
			delta = temp - old; //разница новое - старое
 112:	ac 01       	movw	r20, r24
 114:	42 1b       	sub	r20, r18
 116:	53 0b       	sbc	r21, r19
 118:	9a 01       	movw	r18, r20
 11a:	07 c0       	rjmp	.+14     	; 0x12a <__vector_10+0x4e>
		else //иначе (таймер успел переполниться)
			delta = 65535 - old + temp; //разница 65635 - старое + новое
 11c:	ac 01       	movw	r20, r24
 11e:	41 50       	subi	r20, 0x01	; 1
 120:	51 09       	sbc	r21, r1
 122:	ba 01       	movw	r22, r20
 124:	62 1b       	sub	r22, r18
 126:	73 0b       	sbc	r23, r19
 128:	9b 01       	movw	r18, r22
		if ((UCSR0A&(1<<UDRE0))!=0) //если UART не занят
 12a:	40 91 c0 00 	lds	r20, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 12e:	45 ff       	sbrs	r20, 5
 130:	0e c0       	rjmp	.+28     	; 0x14e <__vector_10+0x72>
			UDR0 = (343 * delta) / 2; //отправка по UART
 132:	67 e5       	ldi	r22, 0x57	; 87
 134:	71 e0       	ldi	r23, 0x01	; 1
 136:	26 9f       	mul	r18, r22
 138:	a0 01       	movw	r20, r0
 13a:	27 9f       	mul	r18, r23
 13c:	50 0d       	add	r21, r0
 13e:	36 9f       	mul	r19, r22
 140:	50 0d       	add	r21, r0
 142:	11 24       	eor	r1, r1
 144:	9a 01       	movw	r18, r20
 146:	36 95       	lsr	r19
 148:	27 95       	ror	r18
 14a:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			TIMSK0 = (1 << OCIE0A) | (1 << OCIE0B);
 14e:	26 e0       	ldi	r18, 0x06	; 6
 150:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
		old = temp; //сохранение нового значения
 154:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 158:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
}
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	7f 91       	pop	r23
 162:	6f 91       	pop	r22
 164:	5f 91       	pop	r21
 166:	4f 91       	pop	r20
 168:	3f 91       	pop	r19
 16a:	2f 91       	pop	r18
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <timer0>:
void timer0()		//функция для инициализации таймера 0
{
	TCCR0A |= (1 << COM0A1) | (0 << COM0A0) | (1 << COM0B1) | (1 << COM0B0)| (1 << WGM00) | (0 << WGM01);
 176:	84 b5       	in	r24, 0x24	; 36
 178:	81 6b       	ori	r24, 0xB1	; 177
 17a:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (0 << CS02) | (1 << CS01) | (0 << CS00); //запуск таймера с частотой Fclk/256
 17c:	85 b5       	in	r24, 0x25	; 37
 17e:	82 60       	ori	r24, 0x02	; 2
 180:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << OCIE0A) | (1 << OCIE0B);
 182:	86 e0       	ldi	r24, 0x06	; 6
 184:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	OCR0A = 255;	//установка регистра сравнения A (50% заполнения)
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	87 bd       	out	0x27, r24	; 39
	OCR0B = 234;
 18c:	8a ee       	ldi	r24, 0xEA	; 234
 18e:	88 bd       	out	0x28, r24	; 40
 190:	08 95       	ret

00000192 <uartic>:
}
void uartic()		//функция инициализации UART
{
	UBRR0 = 103;	//скорость 9600бит/c при частоте генератора 16МГц
 192:	87 e6       	ldi	r24, 0x67	; 103
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 19a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);//размер пакета 8бит
 19e:	e2 ec       	ldi	r30, 0xC2	; 194
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	86 60       	ori	r24, 0x06	; 6
 1a6:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0);	//разрешение передачи данных
 1a8:	e1 ec       	ldi	r30, 0xC1	; 193
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	88 60       	ori	r24, 0x08	; 8
 1b0:	80 83       	st	Z, r24
 1b2:	08 95       	ret

000001b4 <__vector_14>:
}
ISR(TIMER0_COMPA_vect) {
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	8f 93       	push	r24
	PORTB = (1 << PORTB1);
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	85 b9       	out	0x05, r24	; 5
}
 1c4:	8f 91       	pop	r24
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <__vector_15>:
ISR(TIMER0_COMPB_vect) {
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
	PORTB = (0 << PORTB1);
 1da:	15 b8       	out	0x05, r1	; 5
}
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <main>:
int main(void)		//главная процедура, точка входа в программу
{
	DDRB = 0x02;
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	87 b9       	out	0x07, r24	; 7
	TCCR1B = (1 << ICNC1) | (1 << ICES1) | (1 << CS12) | (0 << CS11) | (0 << CS10);
 1ee:	84 ec       	ldi	r24, 0xC4	; 196
 1f0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	//запуск таймера с частотой Fclk/1024 и нарастающий фронт регистра захвата
	TIMSK1 = (1 << ICIE1);	//разрешение прерывания захвата входа
 1f4:	80 e2       	ldi	r24, 0x20	; 32
 1f6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	timer0();
 1fa:	0e 94 bb 00 	call	0x176	; 0x176 <timer0>
	uartic();
 1fe:	0e 94 c9 00 	call	0x192	; 0x192 <uartic>
	sei();
 202:	78 94       	sei
 204:	ff cf       	rjmp	.-2      	; 0x204 <main+0x1e>

00000206 <_exit>:
 206:	f8 94       	cli

00000208 <__stop_program>:
 208:	ff cf       	rjmp	.-2      	; 0x208 <__stop_program>
