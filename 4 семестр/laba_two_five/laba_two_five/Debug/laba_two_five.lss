
laba_two_five.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000025c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a09  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000910  00000000  00000000  00000d05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fa  00000000  00000000  00001615  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001910  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000479  00000000  00000000  00001988  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ac  00000000  00000000  00001e01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001ead  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_11>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_18>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a1 30       	cpi	r26, 0x01	; 1
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
  d4:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <__vector_18>:
int flag = 0;
unsigned char x = 0x00;
int i;	
char M[];
ISR (USART0_RX_vect)				//обработчик прерывани€ USART0_RX
{
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
	//PORTB = (1 << PORTB2);
	PORTB ^= (1 << PORTB2);
  ea:	95 b1       	in	r25, 0x05	; 5
  ec:	84 e0       	ldi	r24, 0x04	; 4
  ee:	89 27       	eor	r24, r25
  f0:	85 b9       	out	0x05, r24	; 5

}
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <__vector_11>:
ISR(TIMER1_COMPA_vect)
{
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	ef 93       	push	r30
 110:	ff 93       	push	r31
	if (x >= 0xB4)
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 116:	84 3b       	cpi	r24, 0xB4	; 180
 118:	58 f0       	brcs	.+22     	; 0x130 <__vector_11+0x30>
	{
		TCCR2A |= (1 << COM2A1) | (1 << COM2B1) | (1 << WGM20) | (1 << WGM21);
 11a:	e0 eb       	ldi	r30, 0xB0	; 176
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	83 6a       	ori	r24, 0xA3	; 163
 122:	80 83       	st	Z, r24
		TCCR2B = (1 << WGM22) | (1 << CS22) | (1 << CS21) | (1 << CS20);
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
		OCR2B = 0;
 12a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 12e:	12 c0       	rjmp	.+36     	; 0x154 <__vector_11+0x54>
	}
	else
	{
		TCCR2A |= (1 << COM2A1) | (1 << COM2B1) | (1 << WGM20) | (1 << WGM21);
 130:	e0 eb       	ldi	r30, 0xB0	; 176
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	83 6a       	ori	r24, 0xA3	; 163
 138:	80 83       	st	Z, r24
		TCCR2B = (1 << WGM22) | (1 << CS22) | (1 << CS21) | (1 << CS20);
 13a:	8f e0       	ldi	r24, 0x0F	; 15
 13c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
		OCR2B = x/6;
 140:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 144:	9b ea       	ldi	r25, 0xAB	; 171
 146:	89 9f       	mul	r24, r25
 148:	81 2d       	mov	r24, r1
 14a:	11 24       	eor	r1, r1
 14c:	86 95       	lsr	r24
 14e:	86 95       	lsr	r24
 150:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	}
	x = 0x00;
 154:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	
}
 158:	ff 91       	pop	r31
 15a:	ef 91       	pop	r30
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <main>:

int main(void)
{
	DDRD = 0xFC;
 16a:	8c ef       	ldi	r24, 0xFC	; 252
 16c:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
 16e:	9f ef       	ldi	r25, 0xFF	; 255
 170:	94 b9       	out	0x04, r25	; 4
	//TIMER1
	TCCR1A |= (1 << COM1A0) | (1 << COM1A1) | (0 << WGM11);
 172:	e0 e8       	ldi	r30, 0x80	; 128
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	80 6c       	ori	r24, 0xC0	; 192
 17a:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (0 << CS11) |(1 << CS10);
 17c:	e1 e8       	ldi	r30, 0x81	; 129
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	8d 60       	ori	r24, 0x0D	; 13
 184:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);
 186:	ef e6       	ldi	r30, 0x6F	; 111
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	82 60       	ori	r24, 0x02	; 2
 18e:	80 83       	st	Z, r24
	OCR1A = 300;
 190:	2c e2       	ldi	r18, 0x2C	; 44
 192:	31 e0       	ldi	r19, 0x01	; 1
 194:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 198:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	//TIMER2(0)
	TCCR2A |= (1 << COM2A1) | (1 << COM2B1) | (1 << WGM20) | (1 << WGM21);
 19c:	e0 eb       	ldi	r30, 0xB0	; 176
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	83 6a       	ori	r24, 0xA3	; 163
 1a4:	80 83       	st	Z, r24
	TCCR2B = (1 << WGM22) | (1 << CS22) | (1 << CS21) | (1 << CS20);
 1a6:	8f e0       	ldi	r24, 0x0F	; 15
 1a8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	OCR2A = 255;
 1ac:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	
	UBRR0 = 103; 	//скорость 9600бит/c при частоте генератора 16ћ√ц
 1b0:	87 e6       	ldi	r24, 0x67	; 103
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1b8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B |= (1 << TXEN0) | (1 << TXCIE0);
 1bc:	e1 ec       	ldi	r30, 0xC1	; 193
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	88 64       	ori	r24, 0x48	; 72
 1c4:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXEN0) | (1 << RXCIE0);//разрешение приЄма данных и прерывани€ USART0_RX
 1c6:	80 81       	ld	r24, Z
 1c8:	80 69       	ori	r24, 0x90	; 144
 1ca:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);//размер пакета 8бит
 1cc:	e2 ec       	ldi	r30, 0xC2	; 194
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	86 60       	ori	r24, 0x06	; 6
 1d4:	80 83       	st	Z, r24
	sei();
 1d6:	78 94       	sei
	while (1)
	{	
		if (UDRE0 != 0)				//проверка на готовность приЄма данных
		{
			x = UDR0;
 1d8:	e6 ec       	ldi	r30, 0xC6	; 198
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1e2:	fc cf       	rjmp	.-8      	; 0x1dc <main+0x72>

000001e4 <_exit>:
 1e4:	f8 94       	cli

000001e6 <__stop_program>:
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <__stop_program>
