
laba_blyat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000220  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009a5  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ed  00000000  00000000  00000c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002de  00000000  00000000  0000154a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001828  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045e  00000000  00000000  00001870  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001cce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001d17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_11>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <__vector_11>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
int flag = 0;
ISR(TIMER1_COMPA_vect)
{
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
	PORTD ^= (1 << PORTD0);
  ea:	9b b1       	in	r25, 0x0b	; 11
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	89 27       	eor	r24, r25
  f0:	8b b9       	out	0x0b, r24	; 11
	if (flag == 0)
  f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  fa:	00 97       	sbiw	r24, 0x00	; 0
  fc:	69 f4       	brne	.+26     	; 0x118 <__vector_11+0x3c>
	{
		TCCR2A = 0b10100011;
  fe:	83 ea       	ldi	r24, 0xA3	; 163
 100:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
		TCCR2B = (1 << WGM22) | (1 << CS22) | (1 << CS21) | (0 << CS20);
 104:	8e e0       	ldi	r24, 0x0E	; 14
 106:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
		flag = 1;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 116:	1c c0       	rjmp	.+56     	; 0x150 <__vector_11+0x74>
	}
	else if (flag == 1)
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	91 05       	cpc	r25, r1
 11c:	69 f4       	brne	.+26     	; 0x138 <__vector_11+0x5c>
	{
		TCCR2A = 0b10100011;
 11e:	83 ea       	ldi	r24, 0xA3	; 163
 120:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
		TCCR2B = (1 << WGM22) | (1 << CS22) | (0 << CS21) | (1 << CS20);
 124:	8d e0       	ldi	r24, 0x0D	; 13
 126:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
		flag = 2;
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 132:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 136:	0c c0       	rjmp	.+24     	; 0x150 <__vector_11+0x74>
	}
	else if (flag == 2)
 138:	02 97       	sbiw	r24, 0x02	; 2
 13a:	51 f4       	brne	.+20     	; 0x150 <__vector_11+0x74>
	{
		TCCR2A = 0b10100011;
 13c:	83 ea       	ldi	r24, 0xA3	; 163
 13e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
		TCCR2B = (1 << WGM22) | (1 << CS22) | (0 << CS21) | (0 << CS20);
 142:	8c e0       	ldi	r24, 0x0C	; 12
 144:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
		flag = 0;
 148:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 14c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
}
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <main>:

int main(void)
{
	DDRD = 0xFF;
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
 162:	84 b9       	out	0x04, r24	; 4
	
	//TIMER1
	TCCR1A |= (1 << COM1A0) | (1 << COM1A1) | (0 << WGM11);
 164:	e0 e8       	ldi	r30, 0x80	; 128
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	80 6c       	ori	r24, 0xC0	; 192
 16c:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);
 16e:	e1 e8       	ldi	r30, 0x81	; 129
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	8d 60       	ori	r24, 0x0D	; 13
 176:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);
 178:	ef e6       	ldi	r30, 0x6F	; 111
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	82 60       	ori	r24, 0x02	; 2
 180:	80 83       	st	Z, r24
	OCR1A = 3906;
 182:	82 e4       	ldi	r24, 0x42	; 66
 184:	9f e0       	ldi	r25, 0x0F	; 15
 186:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 18a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	// TIMER2
	TCCR2A |= (1 << COM2A1) | (1 << COM2B1) | (1 << WGM20) | (1 << WGM21);
 18e:	e0 eb       	ldi	r30, 0xB0	; 176
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	83 6a       	ori	r24, 0xA3	; 163
 196:	80 83       	st	Z, r24
	//OCR2A = 61;  // 1 êÃö - 2 êÃö - 4 êÃö 
	OCR2A = 70;  // 0,9 êÃö - 1,7 êÃö - 3,5 êÃö 
 198:	86 e4       	ldi	r24, 0x46	; 70
 19a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = 35;
 19e:	83 e2       	ldi	r24, 0x23	; 35
 1a0:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	
	sei();
 1a4:	78 94       	sei
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <main+0x48>

000001a8 <_exit>:
 1a8:	f8 94       	cli

000001aa <__stop_program>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <__stop_program>
