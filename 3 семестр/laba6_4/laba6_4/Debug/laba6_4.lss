
laba6_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000029a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000226  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000029a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a57  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000966  00000000  00000000  00000d93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f0  00000000  00000000  000016f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  000019ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046f  00000000  00000000  00001a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fa  00000000  00000000  00001eef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001fe9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 b3 00 	jmp	0x166	; 0x166 <__vector_18>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_20>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a4 30       	cpi	r26, 0x04	; 4
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  d4:	0c 94 11 01 	jmp	0x222	; 0x222 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <__vector_20>:
#include <avr/interrupt.h>
char x = 0x00;
char Msg[];
int i;
ISR (USART0_TX_vect)
{
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	2f 93       	push	r18
  e8:	3f 93       	push	r19
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
	if (i <= strlen(Msg) & UDRE0 != 0 & TXC0 != 0)
  f2:	e1 e0       	ldi	r30, 0x01	; 1
  f4:	f1 e0       	ldi	r31, 0x01	; 1
  f6:	01 90       	ld	r0, Z+
  f8:	00 20       	and	r0, r0
  fa:	e9 f7       	brne	.-6      	; 0xf6 <__vector_20+0x1a>
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	e1 50       	subi	r30, 0x01	; 1
 100:	f1 40       	sbci	r31, 0x01	; 1
 102:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <i>
 106:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <i+0x1>
 10a:	e8 17       	cp	r30, r24
 10c:	f9 07       	cpc	r31, r25
 10e:	e0 f0       	brcs	.+56     	; 0x148 <__vector_20+0x6c>
	{
		UDR0 = Msg[i++];
 110:	9c 01       	movw	r18, r24
 112:	2f 5f       	subi	r18, 0xFF	; 255
 114:	3f 4f       	sbci	r19, 0xFF	; 255
 116:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <i+0x1>
 11a:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <i>
 11e:	fc 01       	movw	r30, r24
 120:	ef 5f       	subi	r30, 0xFF	; 255
 122:	fe 4f       	sbci	r31, 0xFE	; 254
 124:	80 81       	ld	r24, Z
 126:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	}
	if (i >= strlen(Msg))
 12a:	e1 e0       	ldi	r30, 0x01	; 1
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	01 90       	ld	r0, Z+
 130:	00 20       	and	r0, r0
 132:	e9 f7       	brne	.-6      	; 0x12e <__vector_20+0x52>
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	e1 50       	subi	r30, 0x01	; 1
 138:	f1 40       	sbci	r31, 0x01	; 1
 13a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <i>
 13e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <i+0x1>
 142:	8e 17       	cp	r24, r30
 144:	9f 07       	cpc	r25, r31
 146:	20 f0       	brcs	.+8      	; 0x150 <__vector_20+0x74>
		i = 0;
 148:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <i+0x1>
 14c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <i>
}
 150:	ff 91       	pop	r31
 152:	ef 91       	pop	r30
 154:	9f 91       	pop	r25
 156:	8f 91       	pop	r24
 158:	3f 91       	pop	r19
 15a:	2f 91       	pop	r18
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <__vector_18>:

ISR (USART0_RX_vect)
{
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	2f 93       	push	r18
 172:	3f 93       	push	r19
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	ef 93       	push	r30
 17a:	ff 93       	push	r31
	if (RXC0 != 1)
	{
		if (UDR0 == 0x4D)
 17c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 180:	8d 34       	cpi	r24, 0x4D	; 77
 182:	99 f4       	brne	.+38     	; 0x1aa <__vector_18+0x44>
		{
			Msg[i++] = UDR0;
 184:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <i>
 188:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <i+0x1>
 18c:	9c 01       	movw	r18, r24
 18e:	2f 5f       	subi	r18, 0xFF	; 255
 190:	3f 4f       	sbci	r19, 0xFF	; 255
 192:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <i+0x1>
 196:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <i>
 19a:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 19e:	fc 01       	movw	r30, r24
 1a0:	ef 5f       	subi	r30, 0xFF	; 255
 1a2:	fe 4f       	sbci	r31, 0xFE	; 254
 1a4:	20 83       	st	Z, r18
			PORTB = 0x20;
 1a6:	80 e2       	ldi	r24, 0x20	; 32
 1a8:	85 b9       	out	0x05, r24	; 5
		}
		x = 0x00;
 1aa:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
}
 1ae:	ff 91       	pop	r31
 1b0:	ef 91       	pop	r30
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	3f 91       	pop	r19
 1b8:	2f 91       	pop	r18
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <main>:
int main(void)
{
	char y;
	DDRB = 0x20;
 1c4:	80 e2       	ldi	r24, 0x20	; 32
 1c6:	84 b9       	out	0x04, r24	; 4
	UBRR0 = 103; //скорость
 1c8:	87 e6       	ldi	r24, 0x67	; 103
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B |= (1 << TXEN0) | (1<<RXEN0) | (1 << TXCIE0);	//разрешение отправки данных
 1d4:	e1 ec       	ldi	r30, 0xC1	; 193
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	88 65       	ori	r24, 0x58	; 88
 1dc:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);	//размер пакета 8бит
 1de:	e2 ec       	ldi	r30, 0xC2	; 194
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	86 60       	ori	r24, 0x06	; 6
 1e6:	80 83       	st	Z, r24
	sei();	//глобальное разрешение прерываний
 1e8:	78 94       	sei
	//char Msg[];
	x = UDR0;
 1ea:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if (x == 0x21){
 1f2:	81 32       	cpi	r24, 0x21	; 33
 1f4:	59 f4       	brne	.+22     	; 0x20c <main+0x48>
		UCSR0B |= (1 << RXCIE0);
 1f6:	e1 ec       	ldi	r30, 0xC1	; 193
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	80 68       	ori	r24, 0x80	; 128
 1fe:	80 83       	st	Z, r24
		while (1)	//бесконечный цикл
		{
			x = UDR0;
 200:	e6 ec       	ldi	r30, 0xC6	; 198
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 20a:	fc cf       	rjmp	.-8      	; 0x204 <main+0x40>
				Msg[3] = y;
				x = 0x00;*/
		}
	}
	i =0x00;
	UDR0 = Msg[i++];
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <i+0x1>
 214:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <i>
 218:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Msg>
 21c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 220:	ff cf       	rjmp	.-2      	; 0x220 <main+0x5c>

00000222 <_exit>:
 222:	f8 94       	cli

00000224 <__stop_program>:
 224:	ff cf       	rjmp	.-2      	; 0x224 <__stop_program>
