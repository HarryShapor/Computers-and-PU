
laba_4_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000234  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a56  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000926  00000000  00000000  00000dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000366  00000000  00000000  000016ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001a54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000484  00000000  00000000  00001b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ed  00000000  00000000  00001fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000020a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_9>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_21>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <main>
  d4:	0c 94 18 01 	jmp	0x230	; 0x230 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <__vector_21>:
#include <avr/io.h>
#include <avr/interrupt.h>
int counter = 0;
ISR(ADC_vect){
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
	OCR0A = ADCH;
  e8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  ec:	87 bd       	out	0x27, r24	; 39
}
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <__vector_9>:
ISR(TIMER2_OVF_vect){
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	2f 93       	push	r18
 106:	3f 93       	push	r19
 108:	6f 93       	push	r22
 10a:	7f 93       	push	r23
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	af 93       	push	r26
 112:	bf 93       	push	r27
 114:	ef 93       	push	r30
 116:	ff 93       	push	r31
	TCNT2 = 6;
 118:	86 e0       	ldi	r24, 0x06	; 6
 11a:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	counter++;
 11e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 122:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 126:	01 96       	adiw	r24, 0x01	; 1
	if (counter == 8){
 128:	88 30       	cpi	r24, 0x08	; 8
 12a:	91 05       	cpc	r25, r1
 12c:	29 f0       	breq	.+10     	; 0x138 <__vector_9+0x3e>
ISR(ADC_vect){
	OCR0A = ADCH;
}
ISR(TIMER2_OVF_vect){
	TCNT2 = 6;
	counter++;
 12e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 132:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 136:	16 c0       	rjmp	.+44     	; 0x164 <__vector_9+0x6a>
	if (counter == 8){
		counter = 0;
 138:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 13c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		if (UDRE0 != 0){
			UDR0 = TCNT1/100;
 140:	e4 e8       	ldi	r30, 0x84	; 132
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	20 81       	ld	r18, Z
 146:	31 81       	ldd	r19, Z+1	; 0x01
 148:	36 95       	lsr	r19
 14a:	27 95       	ror	r18
 14c:	36 95       	lsr	r19
 14e:	27 95       	ror	r18
 150:	ab e7       	ldi	r26, 0x7B	; 123
 152:	b4 e1       	ldi	r27, 0x14	; 20
 154:	0e 94 09 01 	call	0x212	; 0x212 <__umulhisi3>
 158:	96 95       	lsr	r25
 15a:	87 95       	ror	r24
 15c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			TCNT1 = 0;
 160:	11 82       	std	Z+1, r1	; 0x01
 162:	10 82       	st	Z, r1
		}
	}

}
 164:	ff 91       	pop	r31
 166:	ef 91       	pop	r30
 168:	bf 91       	pop	r27
 16a:	af 91       	pop	r26
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	7f 91       	pop	r23
 172:	6f 91       	pop	r22
 174:	3f 91       	pop	r19
 176:	2f 91       	pop	r18
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <timer0>:
void timer0()
{
	//DDRD = 0x40;
	TCCR0A |= (0 << COM0A1) | (1 << COM0A0) | (0 << COM0B1) | (0 << COM0B0) | (1 << WGM00) | (1 << WGM01);
 182:	84 b5       	in	r24, 0x24	; 36
 184:	83 64       	ori	r24, 0x43	; 67
 186:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << WGM02) | (0 << CS02) | (1 << CS01) | (1 << CS00);
 188:	85 b5       	in	r24, 0x25	; 37
 18a:	8b 60       	ori	r24, 0x0B	; 11
 18c:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0;
 18e:	17 bc       	out	0x27, r1	; 39
 190:	08 95       	ret

00000192 <uartic>:
}
void uartic()
{
	UBRR0 = 103;
 192:	87 e6       	ldi	r24, 0x67	; 103
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 19a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
 19e:	e2 ec       	ldi	r30, 0xC2	; 194
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	86 60       	ori	r24, 0x06	; 6
 1a6:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0);
 1a8:	e1 ec       	ldi	r30, 0xC1	; 193
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	88 60       	ori	r24, 0x08	; 8
 1b0:	80 83       	st	Z, r24
 1b2:	08 95       	ret

000001b4 <adc>:
}
void adc(){
	ADMUX = (0<<REFS1)|(1<<REFS0)|(1<<ADLAR)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(0<<MUX0);
 1b4:	80 e6       	ldi	r24, 0x60	; 96
 1b6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	//вкл. ацп, реж. непрерывн. преобр., разр. прерывания, частота преобр. = FCPU/128
	ADCSRA = (1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 1ba:	8f ee       	ldi	r24, 0xEF	; 239
 1bc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 1c0:	08 95       	ret

000001c2 <timer1>:
}
void timer1(){
	TCCR1A |= (0 << COM0A1) | (0 << COM0A0) | (0 << COM0B1) | (0 << COM0B0) | (0 << WGM00) | (0 << WGM01);
 1c2:	e0 e8       	ldi	r30, 0x80	; 128
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	80 83       	st	Z, r24
	TCCR1B |= (0 << WGM02) | (1 << CS02) | (1 << CS01) | (1 << CS00);
 1ca:	e1 e8       	ldi	r30, 0x81	; 129
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	87 60       	ori	r24, 0x07	; 7
 1d2:	80 83       	st	Z, r24
	OCR1A = 0;
 1d4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1d8:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 = (1 << TOIE1);
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1e2:	08 95       	ret

000001e4 <timer2>:
	
}
void timer2(){
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);
 1e4:	e1 eb       	ldi	r30, 0xB1	; 177
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	87 60       	ori	r24, 0x07	; 7
 1ec:	80 83       	st	Z, r24
	TIMSK2 = (1 << TOIE2);
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 1f4:	08 95       	ret

000001f6 <main>:
}

int main(void)
{
	DDRD = 0b11000000;
 1f6:	80 ec       	ldi	r24, 0xC0	; 192
 1f8:	8a b9       	out	0x0a, r24	; 10
	timer0();
 1fa:	0e 94 c1 00 	call	0x182	; 0x182 <timer0>
	uartic();
 1fe:	0e 94 c9 00 	call	0x192	; 0x192 <uartic>
	adc();
 202:	0e 94 da 00 	call	0x1b4	; 0x1b4 <adc>
	timer1();
 206:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <timer1>
	timer2();
 20a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <timer2>
	sei();
 20e:	78 94       	sei
 210:	ff cf       	rjmp	.-2      	; 0x210 <main+0x1a>

00000212 <__umulhisi3>:
 212:	a2 9f       	mul	r26, r18
 214:	b0 01       	movw	r22, r0
 216:	b3 9f       	mul	r27, r19
 218:	c0 01       	movw	r24, r0
 21a:	a3 9f       	mul	r26, r19
 21c:	70 0d       	add	r23, r0
 21e:	81 1d       	adc	r24, r1
 220:	11 24       	eor	r1, r1
 222:	91 1d       	adc	r25, r1
 224:	b2 9f       	mul	r27, r18
 226:	70 0d       	add	r23, r0
 228:	81 1d       	adc	r24, r1
 22a:	11 24       	eor	r1, r1
 22c:	91 1d       	adc	r25, r1
 22e:	08 95       	ret

00000230 <_exit>:
 230:	f8 94       	cli

00000232 <__stop_program>:
 232:	ff cf       	rjmp	.-2      	; 0x232 <__stop_program>
