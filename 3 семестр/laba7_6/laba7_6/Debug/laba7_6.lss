
laba7_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000988  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008dc  00000000  00000000  00000c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ba  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001798  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044a  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000070  00000000  00000000  00001c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001caa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_21>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  c4:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <__vector_21>:
#include <avr/io.h>			//библиотеки ввода/вывода
#include <avr/interrupt.h>	//библиотека обработки прерываний
ISR (ADC_vect)			//прерывания ADC
{
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	2f 93       	push	r18
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	ef 93       	push	r30
  de:	ff 93       	push	r31
	if (ADCL >= 0x00 &  ADCL <= 0x14) 	//значение от 0 до 20
  e0:	e8 e7       	ldi	r30, 0x78	; 120
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 81       	ld	r24, Z
  e8:	85 31       	cpi	r24, 0x15	; 21
  ea:	18 f4       	brcc	.+6      	; 0xf2 <__vector_21+0x26>
	{
		PORTB = 0x00;			//выключение L
  ec:	15 b8       	out	0x05, r1	; 5
		PORTD = 0x03;			//выключение RX, TX
  ee:	83 e0       	ldi	r24, 0x03	; 3
  f0:	8b b9       	out	0x0b, r24	; 11
	}
	if (ADCL >= 0x15 &  ADCL <= 0x64)	//значение от 21 до 100
  f2:	e8 e7       	ldi	r30, 0x78	; 120
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	90 81       	ld	r25, Z
  f8:	20 81       	ld	r18, Z
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	95 31       	cpi	r25, 0x15	; 21
  fe:	08 f4       	brcc	.+2      	; 0x102 <__vector_21+0x36>
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	88 23       	and	r24, r24
 104:	51 f0       	breq	.+20     	; 0x11a <__vector_21+0x4e>
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	25 36       	cpi	r18, 0x65	; 101
 10a:	08 f0       	brcs	.+2      	; 0x10e <__vector_21+0x42>
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	88 23       	and	r24, r24
 110:	21 f0       	breq	.+8      	; 0x11a <__vector_21+0x4e>
	{
		PORTB = 0x20;			//включение L
 112:	80 e2       	ldi	r24, 0x20	; 32
 114:	85 b9       	out	0x05, r24	; 5
		PORTD = 0x03;			//выключение RX, TX
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	8b b9       	out	0x0b, r24	; 11
	}
	if (ADCL >= 0x65 &  ADCL <= 0xB4)	//значение от 101 до 180
 11a:	e8 e7       	ldi	r30, 0x78	; 120
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	90 81       	ld	r25, Z
 120:	20 81       	ld	r18, Z
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	95 36       	cpi	r25, 0x65	; 101
 126:	08 f4       	brcc	.+2      	; 0x12a <__vector_21+0x5e>
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	88 23       	and	r24, r24
 12c:	51 f0       	breq	.+20     	; 0x142 <__vector_21+0x76>
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	25 3b       	cpi	r18, 0xB5	; 181
 132:	08 f0       	brcs	.+2      	; 0x136 <__vector_21+0x6a>
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	88 23       	and	r24, r24
 138:	21 f0       	breq	.+8      	; 0x142 <__vector_21+0x76>
	{
		PORTB = 0x20;			//включение L
 13a:	80 e2       	ldi	r24, 0x20	; 32
 13c:	85 b9       	out	0x05, r24	; 5
		PORTD = 0x02;			//включение RX
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	8b b9       	out	0x0b, r24	; 11
	}
	if (ADCL >= 0xB5 & ADCL <= 0xFF)	//значение от 181 до 255
 142:	e8 e7       	ldi	r30, 0x78	; 120
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	80 81       	ld	r24, Z
 14a:	85 3b       	cpi	r24, 0xB5	; 181
 14c:	18 f0       	brcs	.+6      	; 0x154 <__vector_21+0x88>
	{
		PORTB = 0x20;			//включение L
 14e:	80 e2       	ldi	r24, 0x20	; 32
 150:	85 b9       	out	0x05, r24	; 5
		PORTD = 0x00;			//включение RX, TX
 152:	1b b8       	out	0x0b, r1	; 11
	}
}
 154:	ff 91       	pop	r31
 156:	ef 91       	pop	r30
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	2f 91       	pop	r18
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <main>:
int main(void)
{
	ADMUX |= (1 << REFS0);			//Vопорного = Vпитания
 168:	ec e7       	ldi	r30, 0x7C	; 124
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	80 64       	ori	r24, 0x40	; 64
 170:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADIE) | (1 << ADPS2) |
 172:	ea e7       	ldi	r30, 0x7A	; 122
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	8f 6c       	ori	r24, 0xCF	; 207
 17a:	80 83       	st	Z, r24
	(1 << ADPS1) | (1 << ADPS0);
	//включение АЦП, включение преобразования, разрешение прерывания ADC и //CLK/128
	DDRB = 0x20;	//на выход PORTB5
 17c:	80 e2       	ldi	r24, 0x20	; 32
 17e:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xff;		//на выход весь PORTD
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	8a b9       	out	0x0a, r24	; 10
	sei();			//глобальное разрешение прерываний
 184:	78 94       	sei
 186:	ff cf       	rjmp	.-2      	; 0x186 <main+0x1e>

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
