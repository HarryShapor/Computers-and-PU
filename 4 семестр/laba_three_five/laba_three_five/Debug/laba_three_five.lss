
laba_three_five.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000029e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000029e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a35  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000939  00000000  00000000  00000d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033a  00000000  00000000  000016c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000494  00000000  00000000  00001acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000183  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000020e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_10>
  2c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__vector_11>
  30:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_12>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 07 01 	call	0x20e	; 0x20e <main>
  d4:	0c 94 13 01 	jmp	0x226	; 0x226 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <__vector_10>:
#include <avr/io.h> //библиотека с логическими именами портов
#include <avr/interrupt.h>
uint16_t old; //глобальная переменная для хранения последнего значения захвата
ISR(TIMER1_CAPT_vect) //прерывание таймера 1 по захвату
{
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	2f 93       	push	r18
  e8:	3f 93       	push	r19
  ea:	4f 93       	push	r20
  ec:	5f 93       	push	r21
  ee:	6f 93       	push	r22
  f0:	7f 93       	push	r23
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
	uint16_t temp = ICR1; //текущее значение захвата
  fa:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  fe:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
		old = temp;
		TIMSK0 = (0 << OCIE0A) | (0 << OCIE0B);
	}
	if (PORTB0 == 0)
	{
		TCCR1B |= (1 << WGM12) | (1 << ICES1) | (0 << CS02) | (1 << CS01) | (0 << CS00);
 102:	e1 e8       	ldi	r30, 0x81	; 129
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	20 81       	ld	r18, Z
 108:	2a 64       	ori	r18, 0x4A	; 74
 10a:	20 83       	st	Z, r18
		if (temp>old) //если текущее больше предыдущего
 10c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 110:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 114:	28 17       	cp	r18, r24
 116:	39 07       	cpc	r19, r25
 118:	28 f4       	brcc	.+10     	; 0x124 <__vector_10+0x48>
			delta = temp - old; //разница новое - старое
 11a:	ac 01       	movw	r20, r24
 11c:	42 1b       	sub	r20, r18
 11e:	53 0b       	sbc	r21, r19
 120:	9a 01       	movw	r18, r20
 122:	07 c0       	rjmp	.+14     	; 0x132 <__vector_10+0x56>
		else //иначе (таймер успел переполниться)
			delta = 65535 - old + temp; //разница 65635 - старое + новое
 124:	ac 01       	movw	r20, r24
 126:	41 50       	subi	r20, 0x01	; 1
 128:	51 09       	sbc	r21, r1
 12a:	ba 01       	movw	r22, r20
 12c:	62 1b       	sub	r22, r18
 12e:	73 0b       	sbc	r23, r19
 130:	9b 01       	movw	r18, r22
		if ((UCSR0A&(1<<UDRE0))!=0) //если UART не занят
 132:	40 91 c0 00 	lds	r20, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 136:	45 ff       	sbrs	r20, 5
 138:	0e c0       	rjmp	.+28     	; 0x156 <__vector_10+0x7a>
			UDR0 = (343 * delta) / 2; //отправка по UART
 13a:	67 e5       	ldi	r22, 0x57	; 87
 13c:	71 e0       	ldi	r23, 0x01	; 1
 13e:	26 9f       	mul	r18, r22
 140:	a0 01       	movw	r20, r0
 142:	27 9f       	mul	r18, r23
 144:	50 0d       	add	r21, r0
 146:	36 9f       	mul	r19, r22
 148:	50 0d       	add	r21, r0
 14a:	11 24       	eor	r1, r1
 14c:	9a 01       	movw	r18, r20
 14e:	36 95       	lsr	r19
 150:	27 95       	ror	r18
 152:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			TIMSK0 = (1 << OCIE0A) | (1 << OCIE0B);
 156:	26 e0       	ldi	r18, 0x06	; 6
 158:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
		old = temp; //сохранение нового значения
 15c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
}
 164:	ff 91       	pop	r31
 166:	ef 91       	pop	r30
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	7f 91       	pop	r23
 16e:	6f 91       	pop	r22
 170:	5f 91       	pop	r21
 172:	4f 91       	pop	r20
 174:	3f 91       	pop	r19
 176:	2f 91       	pop	r18
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <timer1>:
void timer1()		//функция для инициализации таймера 0
{
	TCCR1A |= (1 << COM1A1) | (1 << COM1A0) | (1 << COM1B1) | (0 << COM1B0)| (0 << WGM10) | (0 << WGM11);
 182:	e0 e8       	ldi	r30, 0x80	; 128
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	80 6e       	ori	r24, 0xE0	; 224
 18a:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << ICES1) | (0 << CS02) | (1 << CS01) | (0 << CS00); //запуск таймера с частотой Fclk/256
 18c:	e1 e8       	ldi	r30, 0x81	; 129
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	8a 64       	ori	r24, 0x4A	; 74
 194:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE0A) | (1 << OCIE0B) | (1 << ICIE1);
 196:	ef e6       	ldi	r30, 0x6F	; 111
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	86 62       	ori	r24, 0x26	; 38
 19e:	80 83       	st	Z, r24
	OCR1A = 255;	//установка регистра сравнения A (50% заполнения)
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 234;
 1ac:	8a ee       	ldi	r24, 0xEA	; 234
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 1b4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 1b8:	08 95       	ret

000001ba <uartic>:
}
void uartic()		//функция инициализации UART
{
	UBRR0 = 103;	//скорость 9600бит/c при частоте генератора 16МГц
 1ba:	87 e6       	ldi	r24, 0x67	; 103
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1c2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);//размер пакета 8бит
 1c6:	e2 ec       	ldi	r30, 0xC2	; 194
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	86 60       	ori	r24, 0x06	; 6
 1ce:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0);	//разрешение передачи данных
 1d0:	e1 ec       	ldi	r30, 0xC1	; 193
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	88 60       	ori	r24, 0x08	; 8
 1d8:	80 83       	st	Z, r24
 1da:	08 95       	ret

000001dc <__vector_11>:
}
ISR(TIMER1_COMPA_vect) {
 1dc:	1f 92       	push	r1
 1de:	0f 92       	push	r0
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	0f 92       	push	r0
 1e4:	11 24       	eor	r1, r1
 1e6:	8f 93       	push	r24
	PORTB = (1 << PORTB1);
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	85 b9       	out	0x05, r24	; 5
}
 1ec:	8f 91       	pop	r24
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <__vector_12>:
ISR(TIMER1_COMPB_vect) {
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
	PORTB = (0 << PORTB1);
 202:	15 b8       	out	0x05, r1	; 5
}
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <main>:
int main(void)		//главная процедура, точка входа в программу
{
	DDRB = 0x02;
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	87 b9       	out	0x07, r24	; 7
	timer1();
 216:	0e 94 c1 00 	call	0x182	; 0x182 <timer1>
	uartic();
 21a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <uartic>
	sei();
 21e:	78 94       	sei
	while (1)		//бесконечный цикл
	{
		PORTC = PORTB;
 220:	85 b1       	in	r24, 0x05	; 5
 222:	88 b9       	out	0x08, r24	; 8
 224:	fd cf       	rjmp	.-6      	; 0x220 <main+0x12>

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
