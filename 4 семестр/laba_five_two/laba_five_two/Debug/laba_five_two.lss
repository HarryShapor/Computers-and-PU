
laba_five_two.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000102  00800100  00800100  000002b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000328  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d32  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a29  00000000  00000000  000010ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000583  00000000  00000000  00001b13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00002098  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fa  00000000  00000000  00002124  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000137  00000000  00000000  0000261e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00002755  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_18>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	22 e0       	ldi	r18, 0x02	; 2
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 bb 00 	call	0x176	; 0x176 <main>
  d4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <__vector_18>:
#include <avr/interrupt.h>	//библиотека прерываний
#include <avr/eeprom.h>		//библиотека для работы с EEPROM
char x;					//вспомогательная переменная
int count;				//счётчик адреса eeprom
uint8_t mass[255];		//массив для значений из eeprom
ISR(USART0_RX_vect){	//прерываение по приёму данных по UART
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	2f 93       	push	r18
  e8:	3f 93       	push	r19
  ea:	4f 93       	push	r20
  ec:	5f 93       	push	r21
  ee:	6f 93       	push	r22
  f0:	7f 93       	push	r23
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
  f6:	af 93       	push	r26
  f8:	bf 93       	push	r27
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
	x = UDR0;			//Чтение значения по UART
  fe:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 102:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
	while(!(UCSR0A & (1 << UDRE0))); // Ждем пока буфер отправки не будет пустым
 106:	e0 ec       	ldi	r30, 0xC0	; 192
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	85 ff       	sbrs	r24, 5
 10e:	fd cf       	rjmp	.-6      	; 0x10a <__vector_18+0x2e>
		count++;					//увеличение счётчика адреса eeprom
 110:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count>
 114:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <count+0x1>
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <count+0x1>
 11e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <count>
		eeprom_write_byte((uint8_t *) count, (uint8_t) x);	//запись значения в EEPROM[count]
 122:	0e 94 0f 01 	call	0x21e	; 0x21e <eeprom_write_byte>
		eeprom_write_byte((uint8_t *) 0, (uint8_t) count);	//запись count в EEPROM[0]
 126:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <count>
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 0f 01 	call	0x21e	; 0x21e <eeprom_write_byte>
}
 132:	ff 91       	pop	r31
 134:	ef 91       	pop	r30
 136:	bf 91       	pop	r27
 138:	af 91       	pop	r26
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	7f 91       	pop	r23
 140:	6f 91       	pop	r22
 142:	5f 91       	pop	r21
 144:	4f 91       	pop	r20
 146:	3f 91       	pop	r19
 148:	2f 91       	pop	r18
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <uartic>:
void uartic(){			//функция инициализации UART
	UBRR0 = 103;		//главная процедура, точка входа в программу
 154:	87 e6       	ldi	r24, 0x67	; 103
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 15c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);//размер пакета 8бит
 160:	e2 ec       	ldi	r30, 0xC2	; 194
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	86 60       	ori	r24, 0x06	; 6
 168:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	//разрешение передачи и приёма данных
 16a:	e1 ec       	ldi	r30, 0xC1	; 193
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	88 69       	ori	r24, 0x98	; 152
 172:	80 83       	st	Z, r24
 174:	08 95       	ret

00000176 <main>:
}

int main(void){		//главная процедура, точка входа в программу
	uartic();		//вызов функции инициализации UART
 176:	0e 94 aa 00 	call	0x154	; 0x154 <uartic>
	sei();			//разрешение глобальных прерываний
 17a:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	2f e3       	ldi	r18, 0x3F	; 63
 17e:	38 e7       	ldi	r19, 0x78	; 120
 180:	8d e7       	ldi	r24, 0x7D	; 125
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	21 50       	subi	r18, 0x01	; 1
 186:	30 40       	sbci	r19, 0x00	; 0
 188:	80 40       	sbci	r24, 0x00	; 0
 18a:	90 40       	sbci	r25, 0x00	; 0
 18c:	d9 f7       	brne	.-10     	; 0x184 <main+0xe>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <main+0x1a>
 190:	00 00       	nop
	_delay_ms(150000);	//задержка 15 секунд
	count = eeprom_read_byte((uint8_t*) 0); //Чтение значение из EEPROM[0]
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 07 01 	call	0x20e	; 0x20e <eeprom_read_byte>
 19a:	48 2f       	mov	r20, r24
 19c:	50 e0       	ldi	r21, 0x00	; 0
 19e:	50 93 02 01 	sts	0x0102, r21	; 0x800102 <count+0x1>
 1a2:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <count>
	eeprom_read_block(mass, 0, count);		//Чтение блока из EEPROM
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	83 e0       	ldi	r24, 0x03	; 3
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	0e 94 f7 00 	call	0x1ee	; 0x1ee <eeprom_read_block>
	for (int i=0; i < count; i++){			//перебор значений массива
 1b2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count>
 1b6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <count+0x1>
 1ba:	18 16       	cp	r1, r24
 1bc:	19 06       	cpc	r1, r25
 1be:	b4 f4       	brge	.+44     	; 0x1ec <main+0x76>
 1c0:	a3 e0       	ldi	r26, 0x03	; 3
 1c2:	b1 e0       	ldi	r27, 0x01	; 1
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	30 e0       	ldi	r19, 0x00	; 0
		while(!(UCSR0A & (1 << UDRE0))); // Ожидание пока буфер отправки не будет пустым
 1c8:	e0 ec       	ldi	r30, 0xC0	; 192
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
			UDR0 = mass[i]; // Отправка значения по UART
 1cc:	c6 ec       	ldi	r28, 0xC6	; 198
 1ce:	d0 e0       	ldi	r29, 0x00	; 0
	sei();			//разрешение глобальных прерываний
	_delay_ms(150000);	//задержка 15 секунд
	count = eeprom_read_byte((uint8_t*) 0); //Чтение значение из EEPROM[0]
	eeprom_read_block(mass, 0, count);		//Чтение блока из EEPROM
	for (int i=0; i < count; i++){			//перебор значений массива
		while(!(UCSR0A & (1 << UDRE0))); // Ожидание пока буфер отправки не будет пустым
 1d0:	80 81       	ld	r24, Z
 1d2:	85 ff       	sbrs	r24, 5
 1d4:	fd cf       	rjmp	.-6      	; 0x1d0 <main+0x5a>
			UDR0 = mass[i]; // Отправка значения по UART
 1d6:	8d 91       	ld	r24, X+
 1d8:	88 83       	st	Y, r24
	uartic();		//вызов функции инициализации UART
	sei();			//разрешение глобальных прерываний
	_delay_ms(150000);	//задержка 15 секунд
	count = eeprom_read_byte((uint8_t*) 0); //Чтение значение из EEPROM[0]
	eeprom_read_block(mass, 0, count);		//Чтение блока из EEPROM
	for (int i=0; i < count; i++){			//перебор значений массива
 1da:	2f 5f       	subi	r18, 0xFF	; 255
 1dc:	3f 4f       	sbci	r19, 0xFF	; 255
 1de:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count>
 1e2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <count+0x1>
 1e6:	28 17       	cp	r18, r24
 1e8:	39 07       	cpc	r19, r25
 1ea:	94 f3       	brlt	.-28     	; 0x1d0 <main+0x5a>
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <main+0x76>

000001ee <eeprom_read_block>:
 1ee:	dc 01       	movw	r26, r24
 1f0:	cb 01       	movw	r24, r22

000001f2 <eeprom_read_blraw>:
 1f2:	fc 01       	movw	r30, r24
 1f4:	f9 99       	sbic	0x1f, 1	; 31
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <eeprom_read_blraw+0x2>
 1f8:	06 c0       	rjmp	.+12     	; 0x206 <eeprom_read_blraw+0x14>
 1fa:	f2 bd       	out	0x22, r31	; 34
 1fc:	e1 bd       	out	0x21, r30	; 33
 1fe:	f8 9a       	sbi	0x1f, 0	; 31
 200:	31 96       	adiw	r30, 0x01	; 1
 202:	00 b4       	in	r0, 0x20	; 32
 204:	0d 92       	st	X+, r0
 206:	41 50       	subi	r20, 0x01	; 1
 208:	50 40       	sbci	r21, 0x00	; 0
 20a:	b8 f7       	brcc	.-18     	; 0x1fa <eeprom_read_blraw+0x8>
 20c:	08 95       	ret

0000020e <eeprom_read_byte>:
 20e:	f9 99       	sbic	0x1f, 1	; 31
 210:	fe cf       	rjmp	.-4      	; 0x20e <eeprom_read_byte>
 212:	92 bd       	out	0x22, r25	; 34
 214:	81 bd       	out	0x21, r24	; 33
 216:	f8 9a       	sbi	0x1f, 0	; 31
 218:	99 27       	eor	r25, r25
 21a:	80 b5       	in	r24, 0x20	; 32
 21c:	08 95       	ret

0000021e <eeprom_write_byte>:
 21e:	26 2f       	mov	r18, r22

00000220 <eeprom_write_r18>:
 220:	f9 99       	sbic	0x1f, 1	; 31
 222:	fe cf       	rjmp	.-4      	; 0x220 <eeprom_write_r18>
 224:	1f ba       	out	0x1f, r1	; 31
 226:	92 bd       	out	0x22, r25	; 34
 228:	81 bd       	out	0x21, r24	; 33
 22a:	20 bd       	out	0x20, r18	; 32
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	f8 94       	cli
 230:	fa 9a       	sbi	0x1f, 2	; 31
 232:	f9 9a       	sbi	0x1f, 1	; 31
 234:	0f be       	out	0x3f, r0	; 63
 236:	01 96       	adiw	r24, 0x01	; 1
 238:	08 95       	ret

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
